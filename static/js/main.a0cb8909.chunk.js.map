{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","components/Form.jsx","components/Modal.jsx","components/TriggerButton.jsx","components/Container.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","width","height","doordash","ubereats","postmates","grubhub","CardList","restaurants","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","Form","onSubmit","htmlFor","Modal","onClickOutside","onKeyDown","modalRef","buttonRef","closeModal","ReactDOM","createPortal","tag","role","tabIndex","aria-modal","onClick","ref","aria-label","aria-labelledby","viewBox","d","document","body","Trigger","triggerText","showModal","Container","isShown","closeButton","focus","toggleScrollLock","TriggerButton","event","keyCode","modal","contains","target","querySelector","classList","toggle","Fragment","n","App","onSearchChange","searchfield","value","addRestaurantName","dd","ue","p","gh","fetch","method","JSON","stringify","headers","then","response","json","restaurant","length","restaurantsUpdate","found","toLowerCase","trim","push","preventDefault","filteredRestaurants","filter","includes","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a0cb8909.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\n            <div>\n                <img src={`https://robohash.org/${props.id}?200x200`}  alt={`${props.name}`} width='200' height='200'/>\n                <div>\n                    <h2>{props.name}</h2>\n                    <p>DoorDash: ${props.doordash}</p>\n                    <p>UberEats: ${props.ubereats}</p>\n                    <p>Postmates: ${props.postmates}</p>\n                    <p>GrubHub: ${props.grubhub}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({restaurants}) => {\n    const cardComponent = restaurants.map((user, i) => {\n        return (\n        <Card \n            key={restaurants[i].id}\n            id={restaurants[i].id} \n            name={restaurants[i].name}\n            doordash={restaurants[i].doordash} \n            ubereats={restaurants[i].ubereats}\n            postmates={restaurants[i].postmates}\n            grubhub={restaurants[i].grubhub}\n        />\n        )\n    });\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    \n    return (\n        <div className='pa2'>\n            <input type='search' \n            className = 'pa3 ba b--green bg-lightest-blue'\n            placeholder='search restaurants' \n            onChange={searchChange}\n            />\n        </div>\n\n    );\n    \n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Oops. Something went wrong.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nexport const Form = ({ onSubmit }) => {\nreturn (\n<form onSubmit={onSubmit}>\n    <div className=\"form-group\">\n        <label htmlFor=\"name\">Name: </label>\n        <input className=\"form-control\" id=\"name\" />\n    </div> \n  \n    <div className=\"form-group\">\n        <label htmlFor=\"email\">DoorDash Price: </label>\n        <input className=\"form-control\" id=\"doordash\"\n        placeholder=\"0.00\" \n        />\n    </div>\n\n    <div className=\"form-group\">\n        <label htmlFor=\"email\">UberEats Price: </label>\n        <input className=\"form-control\" id=\"ubereats\"\n        placeholder=\"0.00\" \n        />\n    </div>\n\n    <div className=\"form-group\">\n        <label htmlFor=\"email\">Postmates Price: </label>\n        <input className=\"form-control\" id=\"postmates\"\n        placeholder=\"0.00\" \n        />\n    </div>\n\n    <div className=\"form-group\">\n        <label htmlFor=\"email\">Grubhub Price: </label>\n        <input className=\"form-control\" id=\"grubhub\"\n        placeholder=\"0.00\" \n        />\n    </div>\n\n    <div className=\"form-group\">\n        <button className=\"form-control btn btn-primary\" type=\"submit\">\n            Submit\n        </button>\n        <br></br>\n        Note: The restaurants added are temporary, the REST server is currently not real.\n</div>\n</form>\n);\n};\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Form } from './Form';\nimport FocusTrap from 'focus-trap-react';\n\nexport const Modal = ({\n onClickOutside,\n onKeyDown,\n modalRef,\n buttonRef,\n closeModal,\n onSubmit\n}) => {\nreturn ReactDOM.createPortal(\n<FocusTrap>\n  <aside\n  tag=\"aside\"\n  role=\"dialog\"\n  tabIndex=\"-1\"\n  aria-modal=\"true\"\n  className=\"modal-cover\"\n  onClick={onClickOutside}\n  onKeyDown={onKeyDown}\n>\n    <div className=\"modal-area\" ref={modalRef}>\n    <button\n    ref={buttonRef}\n    aria-label=\"Close Modal\"\n    aria-labelledby=\"close-modal\"\n    className=\"_modal-close\"\n    onClick={closeModal}\n    >\n    <span id=\"close-modal\" className=\"_hide-visual\">\n    Close\n    </span>\n    <svg className=\"_modal-close-icon\" viewBox=\"0 0 40 40\">\n    <path d=\"M 10,10 L 30,30 M 30,10 L 10,30\" />\n    </svg>\n    </button>\n<div className=\"modal-body\">\n   <Form onSubmit={onSubmit} />\n  </div>\n   </div>\n   </aside>\n </FocusTrap>,\ndocument.body\n);\n};\nexport default Modal;","import React from 'react';\n\nconst Trigger = ({ triggerText, buttonRef, showModal }) => {\n  return (\n    <button\n      className=\"btn btn-lg pa3 ba b--green bg-lightest-blue\"\n      ref={buttonRef}\n      onClick={showModal}\n    >\n      {triggerText}\n    </button>\n  );\n};\nexport default Trigger;\n","import React, { Component } from 'react';\nimport { Modal } from './Modal';\nimport TriggerButton from './TriggerButton';\n\n\nexport class Container extends Component {\n  state = { isShown: false };\n  showModal = () => {\n    this.setState({ isShown: true }, () => {\n      this.closeButton.focus();\n    });\n    this.toggleScrollLock();\n  };\n  closeModal = () => {\n    this.setState({ isShown: false });\n    this.TriggerButton.focus();\n    this.toggleScrollLock();\n  };\n  onKeyDown = (event) => {\n    if (event.keyCode === 27) {\n      this.closeModal();\n    }\n  };\n  onClickOutside = (event) => {\n    if (this.modal && this.modal.contains(event.target)) return;\n    this.closeModal();\n  };\n\n  toggleScrollLock = () => {\n    document.querySelector('html').classList.toggle('scroll-lock');\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <TriggerButton\n          showModal={this.showModal}\n          buttonRef={(n) => (this.TriggerButton = n)}\n          triggerText={this.props.triggerText}\n        />\n        {this.state.isShown ? (\n          <Modal\n            onSubmit={this.props.onSubmit}\n            modalRef={(n) => (this.modal = n)}\n            buttonRef={(n) => (this.closeButton = n)}\n            closeModal={this.closeModal}\n            onKeyDown={this.onKeyDown}\n            onClickOutside={this.onClickOutside}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Container from '../components/Container';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            restaurants: [],\n            searchfield: '',\n        }\n    }\n    componentDidMount() {\n        fetch('https://my-json-server.typicode.com/xinrod/rpicker-server/restaurants')\n        .then(response => response.json())\n        .then(restaurants => this.setState({restaurants: restaurants}));\n        //fetch('http://jsonplaceholder.typicode.com/users')\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        \n    }\n    addRestaurantName = (name, dd,ue,p,gh) => {\n        //let restaurant = [name, prices[0], prices[1], prices[2], prices[3]];\n        if (dd === \"\") {\n            dd = \"N/A\";\n        }\n        if (ue === \"\") {\n            ue = \"N/A\";\n        }\n        if (p === \"\") {\n            p = \"N/A\";\n        }\n        if (gh === \"\") {\n            gh = \"N/A\";\n        }\n        fetch('https://my-json-server.typicode.com/xinrod/rpicker-server/restaurants', {\n            method: 'POST',\n            body: JSON.stringify({\n            name: name,\n            doordash: dd,\n            ubereats: ue,\n            postmates: p,\n            grubhub: gh\n        }),\n            headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n        .then(response => response.json())\n        .then(restaurant => {\n            restaurant.id = this.state.restaurants.length + 1;\n            let restaurantsUpdate = this.state.restaurants;\n            let found = false\n            for (let i = 0; i < restaurantsUpdate.length; i++) {\n                if (restaurantsUpdate[i].name.toLowerCase().trim() === restaurant.name.toLowerCase().trim()) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                restaurantsUpdate.push(restaurant);\n            }\n            this.setState({restaurants: restaurantsUpdate});\n        })\n        //TODO: Set-up real rest api\n        // fetch('https://my-json-server.typicode.com/xinrod/rpicker-server/restaurants')\n        // .then(response => response.json())\n        // .then(restaurants => this.setState({restaurants: restaurants}));\n    }\n    \n    onSubmit = (event) => {\n        event.preventDefault(event);\n        this.addRestaurantName(event.target.name.value, \n                            event.target.doordash.value, \n                            event.target.ubereats.value, \n                            event.target.postmates.value, \n                            event.target.grubhub.value);\n    };\n    render() {\n        // const filteredRestaurants = this.state.restaurants;\n        const filteredRestaurants = this.state.restaurants.filter(restaurant => {\n            return restaurant.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        });\n        if (this.state.restaurants.length === 0) {\n            return <h1>Loading...</h1>;\n        } else {\n            return (\n                <div className='tc'>\n                    <h1>Delivery Picker</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Container triggerText={'Add a Restaurant'} onSubmit={this.onSubmit} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList restaurants={filteredRestaurants} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}